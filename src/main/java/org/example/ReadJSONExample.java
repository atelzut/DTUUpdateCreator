package org.example;

import java.io.*;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class ReadJSONExample {
    @SuppressWarnings("unchecked")
    public static void main(String[] args) {
        //JSON parser object to parse read file
        JSONParser jsonParser = new JSONParser();
        try (FileReader content = new FileReader("C:\\Users\\Siracusa\\Desktop\\esportazione.json")) {
            //Read JSON file
            JSONParser parser = new JSONParser();
            Object obj = parser.parse(content);
            JSONArray array = (JSONArray) ((JSONObject) obj).get("items");
            //array.add(obj);
            Map<Long, ArrayList<DbElement>> mappaDiListe = new HashMap<>();

            for (Object o : array) {
                JSONObject alloggio = (JSONObject) o;
                DbElement el = new DbElement();
                el.setIdObj((Long) alloggio.get("idobj"));
                el.setRev((Long) alloggio.get("rev"));
                el.setDataInizioAttivita(Utils.getDatefromTimestampString(String.valueOf(alloggio.get("datainizioattivita"))));
                el.setDatafineAttivita(Utils.getDateFromString(String.valueOf(alloggio.get("datafineattivita"))));
                if (mappaDiListe.containsKey(el.getIdObj())) {
                    mappaDiListe.get(el.getIdObj()).add(el);

                } else {
                    ArrayList<DbElement> temp = new ArrayList<DbElement>();
                    temp.add(el);
                    mappaDiListe.put(el.getIdObj(), temp);
                }

            }

            BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\Siracusa\\Desktop\\update.sql"));

            String CREA_TABELLA_NOTE = "CREATE TABLE DTUTALLOGGIONOTE(\n" +
                    " \"IDOBJ\" NUMBER, --GENERATED BY DEFAULT AS IDENTITY,\n" +
                    " \n" +
                    " \"IDALLOGGIO\" NUMBER ,\n" +
                    "CREATIONDATE TIMESTAMP,\n" +
                    "    NOTE VARCHAR2(500) NOT NULL,\n" +
                    "    IDOPERATORE VARCHAR2(50),\n" +
                    "    RUOLOOPERATORE VARCHAR2(50),\n" +
                    "     CONSTRAINT \"DTUtALLOGGIO_ID_R01\" FOREIGN KEY (\"IDALLOGGIO\")\n" +
                    "\t  REFERENCES \"SUDTU01\".\"DTUTALLOGGIOPRIVATO\" (\"IDOBJ\") ENABLE\n" +
                    "    );";

            String ADD_COLUMNS = "alter table DTUTALLOGGIOPRIVATO add DATAINIZIOEFFETTIVA DATE;\n" +
                    "alter table DTUTALLOGGIOPRIVATO_AUD add DATAINIZIOEFFETTIVA DATE;\n" +
                    "alter table DTUTALLOGGIOPRIVATO_AUD add ATTIVO_DAL DATE;\n" +
                    "alter table DTUTALLOGGIOPRIVATO add ATTIVO_DAL DATE;\n";


            String UPDATE_DIE = "UPDATE dtutalloggioprivato f\n" +
                    "SET f.datainizioeffettiva = (\n" +
                    "   SELECT min( s.datainizioattivita )\n" +
                    "   FROM dtutalloggioprivato_aud s\n" +
                    "   WHERE s.idobj  = f.idobj \n" +
                    ");\n" +
                    "\n" +
                    "UPDATE dtutalloggioprivato_aud f\n" +
                    "SET f.datainizioeffettiva = (\n" +
                    "   SELECT min( s.datainizioattivi\n" +
                    "   ta )\n" +
                    "   FROM dtutalloggioprivato_aud s\n" +
                    "   WHERE s.idobj  = f.idobj \n" +
                    ");\n";
            String UPDATE_ATTIVODAL = "update dtutalloggioprivato f \n" +
                    "set attivodal = (select max (attivodal)\n" +
                    "from dtutalloggioprivato_aud_backup s\n" +
                    "where f.idobj = s.idobj\n" +
                    ");";

            writer.write(ADD_COLUMNS);
            writer.write(CREA_TABELLA_NOTE);
            writer.write(UPDATE_DIE);


            for (Map.Entry<Long, ArrayList<DbElement>> entry : mappaDiListe.entrySet()) {
                Utils.UpdateCreator(entry.getValue(), writer);
            }
            writer.write(UPDATE_ATTIVODAL);
            writer.write("commit;");
            writer.close();
            System.out.println(array.size());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    public DbElement parseAlloggioObject(JSONObject alloggio) {
        //Get employee object within list
        DbElement el = new DbElement();
        el.setIdObj((Long) alloggio.get("idobj"));
        el.setRev((Long) alloggio.get("rev"));
        el.setDataInizioAttivita((Timestamp) alloggio.get("datainizioattivita"));
        el.setDatafineAttivita((Date) alloggio.get("datafineattivita"));
        return el;
    }

}